---
import { ViviendaApi } from "../../api/A2viviendasREST/apis";
import WindbnbLayout from "../../layouts/WindbnbLayout.astro";
import ValoracionComponente from "../../components/ValoracionComponente.astro";
import { isLoggedIn } from "../../utils/auth0";
import Map from "../../components/Map.svelte";
import AppConfig from "../../config";
import {
  Configuration as ViviendaConfiguration,
  Vivienda,
} from "../../api/A2viviendasREST";
import {
  EESSPrecio,
  GasStationsApi,
  GetGasStationsByRadiusRequest,
  Configuration as DatosAbiertosConfiguration,
  AverageStayApi,
  Data,
  GetAverageStayRequest,
} from "../../api/A2datosabiertosREST";
import Carousel from "../../components/Carousel.astro";
import { MONTHS } from "../../utils/months";
import Checkout from "../../components/Checkout.svelte";
import { getAccessToken, getUserId } from "../../utils/auth0";


const { idCasa } = Astro.params as { idCasa: string };
const viviendaApi = new ViviendaApi(
  new ViviendaConfiguration({
      ...AppConfig.viviendas,
      accessToken: () => getAccessToken(Astro),
    })
);

let viv: Vivienda;

try {
  viv = await viviendaApi.getHouseById({ idCasa });
} catch (error) {
  return Astro.redirect(
    "/?" + new URLSearchParams({ danger: "Cannot find house with that ID" })
  );
}

const deleteHouseURI = "/houses/delete/" + idCasa;
const editHouseURI = "/houses/edit/" + idCasa;

const requestParameters: GetGasStationsByRadiusRequest = {
  latitude: parseFloat(viv?.latitude),
  longitude: parseFloat(viv?.longitude),
  limit: 50,
};

const gasStationApi = new GasStationsApi(
  new DatosAbiertosConfiguration(AppConfig.datosAbiertos)
);
let gasStationsInRadius: EESSPrecio[];
try {
  gasStationsInRadius = await gasStationApi.getGasStationsByRadius(
    requestParameters
  );
} catch (error) {
  gasStationsInRadius = [];
}

const averageStayParameters: GetAverageStayRequest = {
  provincia: viv.location.split(", ")[3],
  mes: MONTHS[new Date().getMonth() - 1],
};

const averageStayApi = new AverageStayApi(
  new DatosAbiertosConfiguration(AppConfig.datosAbiertos)
);
let averageStay: Data;
try {
  averageStay = await averageStayApi.getAverageStay(averageStayParameters);
} catch (error) {
  averageStay = {
    valor: undefined,
  };
}

const valoraciones = await viviendaApi.getValoraciones({ idCasa });
let userId = "";
if (isLoggedIn(Astro)) {
  userId = await getUserId(Astro);
}

const formData = {
  idCasa: idCasa,
  userId: userId,
  comment: "",
  rate: ""
}
---

<WindbnbLayout title={viv?.title} page={"HOME"}>
  <body>
    <div
      class="position-relative overflow-hidden p-3 p-md-2 m-md-2 text-center bg-light"
    >
      <div class="col-md-10 p-lg-2 mx-auto">
        <h1 class="display-6 fw-normal">{viv?.title}</h1>
        <p class="lead fw-normal">{viv?.description}</p>
        <p class="lead fw-normal">{viv?.price} euros/night.</p>
        <p class="lead fw-normal">Owner: {viv?.userId}</p>
      </div>
      {
        userId === viv?.userId && (
          <div>
            <form action={deleteHouseURI} method="post">
              <button class="btn btn-danger" type="submit">
                Delete house
              </button>
            </form>

            <form class="pt-2" action={editHouseURI} method="post">
              <button class="btn btn-warning" type="submit">
                Edit house
              </button>
            </form>
          </div>
        )
      }
    </div>

    <div class="d-md-flex flex-md-equal w-100 my-md-3 ps-md-3">
      <div
        class="bg-light me-md-3 pt-3 px-3 pt-md-5 px-md-5 text-center overflow-hidden"
      >
        <div class="my-3 p-3">
          <h2 class="display-5">Book now!</h2>
          <p class="lead">Check the available dates.</p>
          <small class="lead"
            >This house is {
              viv?.state == "available" ? "available" : "reserved"
            }</small
          >
          {
            averageStay.valor && (
              <p>
                The average stay this month in {averageStayParameters.provincia}{" "}
                is {averageStay.valor} days
              </p>
            )
          }
        </div>
        <div class="bg-body shadow-sm mx-auto rounded-5 mb-2">
          <div class="text-center pt-3 mx-auto p-3">
            {
              userId !== viv?.userId ? (
                <Checkout
                  client:load
                  vivienda={viv}
                  paypalClientId={import.meta.env.PUBLIC_PAYPAL_CLIENTID}
                />
              ) : (
                <div>You can't book your own house</div>
              )
            }
          </div>
        </div>
      </div>
      <div class="col-lg-7 col-sm-12">
        <Carousel urls={viv?.urlPhoto} />
      </div>
    </div>
    <div class="col-12">
      <p class="lead fw-normal">{viv?.location}</p>
      <Map
        client:load
        coordinates={requestParameters}
        gasStations={gasStationsInRadius}
      />
    </div>

    <div class="col-12">
      <h3>Valorations</h3>
      {
        isLoggedIn(Astro) && userId !== viv?.userId ? (
        <form method="post" action="/houses/valorationHandler">
          <div class="mb-3">
              <input type="text" name="idCasa" value={formData.idCasa} hidden />
              <input type="text" name="userId" value={formData.userId} hidden />
              <label for="comment" class="form-label">Comment: </label>
              <textarea value={formData.comment} name="comment" class="form-control"></textarea>
              <label for="rate" class="form-label">Rate: </label>
              <input value={formData.rate} name="rate" type="number" max="10" min="0" class="form-control"/>
              <button type="submit" class="btn btn-primary">Send</button>
          </div>    
        </form>
        ) : (<p></p>)
      }
      {valoraciones.map((valoracion) => <ValoracionComponente valoracion={valoracion} />)}
    </div>

  </body>
</WindbnbLayout>
