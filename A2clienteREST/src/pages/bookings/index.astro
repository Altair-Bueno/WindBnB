---
import {
  BookingApi,
  BookingStateEnum,
  Configuration as BookingConfiguration,
  SortBookingEnum,
} from "../../api/A2reservasREST";
import {
  Configuration as ViviendaConfiguration,
  ViviendaApi,
} from "../../api/A2viviendasREST";
import AppConfig from "../../config";
import { getUri } from "./[bookingId]";
import WindbnbLayout from "../../layouts/WindbnbLayout.astro";
import { z } from "zod";
import { formatCheckbox, formatDate } from "../../utils/format";
import { getAccessToken, isLoggedIn } from "../../utils/auth0";

if (!isLoggedIn(Astro)) {
  return Astro.redirect(
    "/?" + new URLSearchParams({ danger: "User is not logged in" })
  );
}
const ITEMS_PER_PAGE = 10;

const formScheme = z.object({
  beforeDate: z.coerce.date().optional(),
  afterDate: z.coerce.date().optional(),
  sortBy: z.nativeEnum(SortBookingEnum).optional(),
  ascending: z
    .string()
    .transform((x) => x === "on")
    .optional(),
  state: z.nativeEnum(BookingStateEnum).optional(),
  page: z.coerce.number().default(0),
});

const rawFormData = Array.from(Astro.url.searchParams.entries())
  .filter((x) => x[1])
  .reduce((acc, [x, y]) => {
    acc[x] = y;
    return acc;
  }, {} as Record<string, any>);

const formData = formScheme.parse(rawFormData);
const skip = formData.page * ITEMS_PER_PAGE;

const bookingConfig = new BookingConfiguration({
  basePath: import.meta.env.RESERVAS_BASE_PATH,
  accessToken: () => getAccessToken(Astro),
});
const bookingApi = new BookingApi(bookingConfig);
const viviendaApi = new ViviendaApi(
  new ViviendaConfiguration(AppConfig.viviendas)
);

const bookings = await bookingApi.getBookings({ ...formData, skip });
const futures = bookings.map(async (x) => {
  const house = await viviendaApi.getHouseById({ idCasa: x.houseId });
  return { ...x, house };
});

const prevUrl = new URL(Astro.url);
const nextUrl = new URL(Astro.url);
prevUrl.searchParams.set("page", (formData.page - 1).toString());
nextUrl.searchParams.set("page", (formData.page + 1).toString());
const model = await Promise.all(futures);
---

<WindbnbLayout title="My bookings" page={"BOOKING"}>
  <div class="row">
    <h1>Bookings</h1>
    <aside class="col-md-12 col-lg-2">
      <form>
        <div class="mb-3">
          <label class="form-check-label">Before date</label>
          <input
            type="date"
            name="beforeDate"
            value={formatDate(formData.beforeDate)}
            class="form-control"
          />
        </div>
        <div class="mb-3">
          <label class="form-check-label">After date</label>
          <input
            type="date"
            name="afterDate"
            value={formatDate(formData.afterDate)}
            class="form-control"
          />
        </div>
        <div class="mb-3">
          <label class="form-check-label">Sort by</label>
          <select class="form-select form-select-sm" name="sortBy">
            <option></option>
            {
              Object.values(SortBookingEnum).map((x) => (
                <option value={x} selected={formData.sortBy === x}>
                  {x}
                </option>
              ))
            }
          </select>
        </div>
        <div class="mb-3">
          <div class="form-check">
            <input
              class="form-check-input"
              type="checkbox"
              checked={formatCheckbox(formData.ascending)}
              name="ascending"
            />
            <label class="form-check-label">Ascending</label>
          </div>
        </div>

        <div class="mb-3">
          <label class="form-check-label">State</label>
          <select class="form-select form-select-sm" name="state">
            <option></option>
            {
              Object.values(BookingStateEnum).map((x) => (
                <option value={x} selected={formData.state === x}>
                  {x}
                </option>
              ))
            }
          </select>
        </div>
        <button type="submit" class="btn btn-primary">Filter</button>
      </form>
    </aside>

    <main class="col">
      <div class="table-responsive">
        <table class="table">
          <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">House</th>
              <th scope="col">Start date</th>
              <th scope="col">End date</th>
              <th scope="col">State</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody>
            {
              model.map((booking, idx) => (
                <tr>
                  <td>{idx + 1 + formData.page * ITEMS_PER_PAGE}</td>
                  <td>
                    <a href={`/houses/${booking.houseId}`}>
                      {booking.house.title}
                    </a>
                  </td>
                  <td>{booking.startDate.toLocaleDateString()}</td>
                  <td>{booking.endDate.toLocaleDateString()}</td>
                  <td>{booking.state}</td>
                  <td>
                    <form method="POST" action={getUri(booking.id)}>
                      <input hidden />
                      <input
                        type="submit"
                        value="Cancel booking"
                        class="btn btn-danger"
                        disabled={booking.state !== "reserved"}
                      />
                    </form>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
      <nav>
        <ul class="pagination justify-content-center">
          <li class={`page-item ${formData.page === 0 ? "disabled" : ""}`}>
            <a class="page-link" href={prevUrl}>Previous</a>
          </li>
          <li class="page-item">
            <a
              class={`page-link ${
                model.length < ITEMS_PER_PAGE ? "disabled" : ""
              }`}
              href={nextUrl}>Next</a
            >
          </li>
        </ul>
      </nav>
    </main>
  </div>
</WindbnbLayout>
